Whole Project
1. TODO => be able to take input from files as opposed to just C standard input
2. TODO (*IMPORTANT*) => figure out why parser isn't parsing function declarations correctly

In AST.cpp
1. TODO => add a type parameter to the ExprAST class so that I can add strings, booleans, arrays, ETC
2. TODO => implement a visitior pattern as opposed to virtual *codegen() methods

In Lexer.cpp
1. TODO => further test the boolean expression in digit portion of the lexer
2. TODO => FIX THE DECIMAL POINT CHECKER

In Parser.cpp
1. TODO => add more user friendly error handling for incorrect input (LogError functions...)
2. TODO => add expression parsing for string and boolean literals as well...
3. TODO => add extra error handling that doesn't just involve returning a nullptr on bad input
4. TODO => implement types in parsing of function declarations and definitions of paramaters

In Main.cpp
1. TODO => add extra binary operators and their respective precedences

In Codegen.cpp
1. TODO => modify ir builder to accept multiple types

FOR MY OWN LEARNIG
1. TODO => review operator precedence parsing technique
2. TODO => review recursive descent parsing
3. TODO => explore how the builder is setup to turn code into IR (in the codegen module)