Whole Project
1. DONE => be able to take input from files as opposed to just C standard input
2. DONE (*IMPORTANT*) => figure out why parser isn't parsing function declarations correctly
3. TODO => implement linking of multiple files together using the "llvm-link" command
4. TODO (*IMPORTANT*) => implement ARM and other architecture parsing support
5. TODO => implement while loop control flow and functionality
6. DONE (*IMPORTANT*) => add a mem2reg function pass to my pass pass manager (SROA pass more powerful and can handle pointers, structs, unions, etc...)
4. TODO (*IMPORTANT*) => resolve the issues with adding mem2reg passes (llvm pathing issue most likely)

In AST.cpp
1. TODO => add a type parameter to the ExprAST class so that I can add strings, booleans, arrays, ETC
2. TODO => implement a visitior pattern as opposed to virtual *codegen() methods

In Lexer.cpp
1. TODO => further test the boolean expression in digit portion of the lexer
2. TODO => FIX THE DECIMAL POINT CHECKER

In Parser.cpp
1. TODO => add more user friendly error handling for incorrect input (LogError functions...)
2. TODO => add expression parsing for string and boolean literals as well...
3. TODO => add extra error handling that doesn't just involve returning a nullptr on bad input
4. TODO => implement types in parsing of function declarations and definitions of paramaters
5. TODO (*IMPORTANT*) => add parenthesis for parsing through conditional expressions
6. TODO => don't require else statements in conditionals

In Main.cpp
1. TODO => add extra binary operators and their respective precedences

In Codegen.cpp
1. TODO => modify ir builder to accept multiple types
2. TODO => verify that my own implementation of the division operator works when I generate ir
3. DONE (*IMPORTANT*) => validate function declaration against definition (MAKE SURE SIGNATURES ARE IDENTICAL (in llvm::Function *FunctionAST::codegen()))

FOR MY OWN LEARNIG
1. TODO => review operator precedence parsing technique
2. TODO => review recursive descent parsing
3. TODO => explore how the builder is setup to turn code into IR (in the codegen module)


BRANCHING INSTRUCTIONS =>
1. Create a branch 
    a. git branch <new_branch_name> => create the branch
    b. git checkout <new_branch_name> => enter the branch
2. Add new feature, etc until it has been implemented and has been verified to work
3. Merge with the main branch
    a. git checkout main => go back to the main branch
    b. git merge <branch_name> => merge the branches codebase with main
    c. push the merged changes to main
4. Delete the branch remotely ONLY AFTER YOU VERIFY THAT CHANGES ARE SHOWN IN MAIN BRANCH
    a. git push origin --delete <branch_name>